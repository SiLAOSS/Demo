// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>SiLA.Provider</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>False</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SiLA.Provider
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;


    /// <summary>
    /// Status event
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1026")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class StatusEvent
    {

        private string deviceIdField;

        private string deviceURIField;

        private Status deviceStateField;

        private System.DateTime stateChangeTimeField;

        private string statusMessageField;

        private string faultCorrectionHintsField;

        private string currentValueField;

        private List<string> extensionField;

        /// <summary>
        /// Gets or sets the device id.
        /// </summary>
        /// <value>
        /// The device id.
        /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DeviceId
        {
            get
            {
                return this.deviceIdField;
            }
            set
            {
                this.deviceIdField = value;
            }
        }

        /// <summary>
        /// Gets or sets the device URI.
        /// </summary>
        /// <value>
        /// The device URI.
        /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DeviceURI
        {
            get
            {
                return this.deviceURIField;
            }
            set
            {
                this.deviceURIField = value;
            }
        }

        /// <summary>
        /// Gets or sets the state of the device.
        /// </summary>
        /// <value>
        /// The state of the device.
        /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Status DeviceState
        {
            get
            {
                return this.deviceStateField;
            }
            set
            {
                this.deviceStateField = value;
            }
        }

        /// <summary>
        /// Gets or sets the state change time.
        /// </summary>
        /// <value>
        /// The state change time.
        /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime StateChangeTime
        {
            get
            {
                return this.stateChangeTimeField;
            }
            set
            {
                this.stateChangeTimeField = value;
            }
        }

        /// <summary>
        /// Gets or sets the status message.
        /// </summary>
        /// <value>
        /// The status message.
        /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string StatusMessage
        {
            get
            {
                return this.statusMessageField;
            }
            set
            {
                this.statusMessageField = value;
            }
        }

        /// <summary>
        /// Gets or sets the fault correction hints.
        /// </summary>
        /// <value>
        /// The fault correction hints.
        /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FaultCorrectionHints
        {
            get
            {
                return this.faultCorrectionHintsField;
            }
            set
            {
                this.faultCorrectionHintsField = value;
            }
        }

        /// <summary>
        /// Gets or sets the current value.
        /// </summary>
        /// <value>
        /// The current value.
        /// </value>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CurrentValue
        {
            get
            {
                return this.currentValueField;
            }
            set
            {
                this.currentValueField = value;
            }
        }

        /// <summary>
        /// Gets or sets the extension.
        /// </summary>
        /// <value>
        /// The extension.
        /// </value>
        [System.Xml.Serialization.XmlElementAttribute("Extension", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<string> Extension
        {
            get
            {
                return this.extensionField;
            }
            set
            {
                this.extensionField = value;
            }
        }
    }

    /// <summary>
    /// The states of the state machine of the SiLA Service Provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1026")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public enum Status
    {
        /// <summary>
        /// This state shall be reached after power on.
        /// </summary>
        startup,

        /// <summary>
        /// Handling the process of resetting as a separate state shall avoid the risk that several reset-commands are accepted concurrently or overwrite each other.
        /// </summary>
        resetting,

        /// <summary>
        /// In this state the SiLA Service Provider has reset all software data. No actions are carried out with the device.
        /// </summary>
        standby,

        /// <summary>
        /// The process of initializing can take quite some time. Therefore the state initializing is introduced so that the GetStatus command can report this transitory state.
        /// </summary>
        initializing,

        /// <summary>
        /// In this state the SiLA Service Provider is ready to execute a command. The connection to the device is established if necessary. The hardware is initialized, e.g. motors are homed.
        /// </summary>
        idle,

        /// <summary>
        /// In this state the SiLA Service Provider has taken all necessary actions to ensure that an operator can interfere with the device or its environment without any risks. 
        /// The sub-state commandsPaused is used to indicate that there are asynchronous commands that can be continued.
        /// </summary>
        paused,

        /// <summary>
        /// In this state the SiLA Service Provider has detected an error, which is not recoverable. This can also occur during communication with the SiLA Event Receiver.
        /// </summary>
        inError,

        /// <summary>
        /// In this state the SiLA Service Provider is working. It has some sub states.
        /// </summary>
        busy,

        /// <summary>
        /// In this state the SiLA Service Provider has detected an error, which is recoverable: It has notified the SiLA Event Receiver by sending an Error Event and is now waiting for the continuation instruction. 
        /// This instruction shall be delivered within the return value of the Error Event.
        /// Also all actions shall be taken to ensure that an operator can interfere with the device or its environment without any risks.
        /// </summary>
        errorHandling,
    }
}
